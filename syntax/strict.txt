strict.txt
Created Mon Jun 23 13:20:03 AKDT 2008
by Raymond E. Marcil


Use of the 'use strict;' in perl.

http://www.perl.com/doc/manual/html/lib/strict.html


    * NAME
    * SYNOPSIS
    * DESCRIPTION 


NAME
====
strict - Perl pragma to restrict unsafe constructs


SYNOPSIS
========
    use strict;

    use strict "vars";
    use strict "refs";
    use strict "subs";

    use strict;
    no strict "vars";


DESCRIPTION
===========
If no import list is supplied, all possible restrictions are assumed. (This is the safest mode to operate 
in, but is sometimes too strict for casual programming.) Currently, there are three possible things to be 
strict about: ``subs'', ``vars'', and ``refs''.

strict refs
-----------
    This generates a runtime error if you use symbolic references (see the perlref manpage).

        use strict 'refs';
        $ref = \$foo;
        print $$ref;        # ok
        $ref = "foo";
        print $$ref;        # runtime error; normally ok

strict vars
-----------
    This generates a compile-time error if you access a variable that wasn't declared via use vars, 
localized via my() or wasn't fully qualified. Because this is to avoid variable suicide problems and subtle 
dynamic scoping issues, a merely local() variable isn't good enough. See my and local.

        use strict 'vars';
        $X::foo = 1;         # ok, fully qualified
        my $foo = 10;        # ok, my() var
        local $foo = 9;      # blows up

        package Cinna;
        use vars qw/ $bar /;        # Declares $bar in current package
        $bar = 'HgS';               # ok, global declared via pragma

    The local() generated a compile-time error because you just touched a global name without fully 
qualifying it.

strict subs
-----------
    This disables the poetry optimization, generating a compile-time error if you try to use a bareword 
identifier that's not a subroutine, unless it appears in curly braces or on the left hand side of the ``=>'' 
symbol.

        use strict 'subs';
        $SIG{PIPE} = Plumber;       # blows up
        $SIG{PIPE} = "Plumber";     # just fine: bareword in curlies always ok
        $SIG{PIPE} = \&Plumber;     # preferred form

See Pragmatic Modules.


DISCLAIMER
==========
We are painfully aware that these documents may contain incorrect links and misformatted HTML. Such bugs lie 
in the automatic translation process that automatically created the hundreds and hundreds of separate 
documents that you find here. Please do not report link or formatting bugs, because we cannot fix 
per-document problems. The only bug reports that will help us are those that supply working patches to the 
installhtml or pod2html programs, or to the Pod::HTML module itself, for which I and the entire Perl 
community will shower you with thanks and praises.

If rather than formatting bugs, you encounter substantive content errors in these documents, such as 
mistakes in the explanations or code, please use the perlbug utility included with the Perl distribution.

    --Tom Christiansen, Perl Documentation Compiler and Editor

Return to the Perl Documentation Index.
Return to the Perl Home Page.


Links:
=====
strict
http://www.perl.com/doc/manual/html/lib/strict.html
